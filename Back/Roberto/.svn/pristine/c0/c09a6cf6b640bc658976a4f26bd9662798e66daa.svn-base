<?php

/**
 * This is the model class for table "language_web_texts".
 *
 * The followings are the available columns in table 'language_web_texts':
 * @property integer $id
 * @property integer $language_id
 * @property integer $web_text_id
 * @property string $value
 * @property datetime $updated_on
 * @property boolean $deleted
 */
 
class LanguageWebTexts extends CActiveRecord{
    
	/**
	 * Returns the static model of the specified AR class.
	 * @return LanguageWebTexts the static model class
	 */
	public static function model($className=__CLASS__){
		return parent::model($className);
	}

	/**
	 * @return string the associated database table name
	 */
	public function tableName(){
		return 'language_web_texts';
	}

	/**
	 * @return array validation rules for model attributes.
	 */
	public function rules(){
		// NOTE: you should only define rules for those attributes that
		// will receive user inputs.
		return array(
			array('language_id, web_text_id, updated_on, deleted, ', 'required'),
                        array('language_id, web_text_id, ', 'numerical', 'integerOnly'=>true),
                        array('deleted, ', 'boolean'),
                        array('updated_on, ', 'date', 'format'=>'yyyy-MM-dd hh:mm:ss'),
                        array('value', 'length', 'max'=>2048),
                        array('id, language_id, web_text_id, value, updated_on, deleted, ', 'safe', 'on'=>'search'),
                        
		);
	}

	/**
	 * @return array relational rules.
	 */
	public function relations(){
		// NOTE: you may need to adjust the relation name and the related
		// class name for the relations automatically generated below.
		return array(
		);
	}

	/**
	 * @return array customized attribute labels (name=>label)
	 */
	public function attributeLabels(){
		return array(
			'id' => 'ID',
                        'language_id' => 'LanguageId',
                        'web_text_id' => 'WebTextId',
                        'value' => 'Value',
                        'updated_on' => 'UpdatedOn',
                        'deleted' => 'Deleted',
                        
		);
	}

	/**
	 * Retrieves a list of models based on the current search/filter conditions.
	 * @return CActiveDataProvider the data provider that can return the models based on the search/filter conditions.
	 */
	public function search(){
		// Warning: Please modify the following code to remove attributes that
		// should not be searched.

		$criteria=new CDbCriteria;

		$criteria->compare('language_id',$this->language_id);
                $criteria->compare('web_text_id',$this->web_text_id);
                $criteria->compare('value',$this->value,true);
                $criteria->compare('updated_on',$this->updated_on);
                $criteria->compare('deleted',$this->deleted);
                

		return new CActiveDataProvider(get_class($this), array(
			'criteria'=>$criteria,
		));
	}
        
    
    
        public static function getByName($name){
            $language = Languages::$SPANISH;
            if(isset(Yii::app()->session['session_lang_id']) && is_numeric(Yii::app()->session['session_lang_id']))
                $language = Yii::app()->session['session_lang_id'];
            else
                Yii::app()->session['session_lang_id'] = $language;
            
            $webText=WebTexts::model()->find("name='".$name."'");
            
            if(isset($webText->id)){
                if($webText->id==5)
                    die($language);
                
                $languageWebText=LanguageWebTexts::model()->find("web_text_id=".$webText->id." AND language_id=".$language);
                
                if(isset($languageWebText->id))
                    return $languageWebText->value;
            }
        }
    
        public static function get($id){
            
            $languageWebText = self::model()->findByPk($id);
            if(isset($languageWebText->id))
                return $languageWebText;
            else
                return false;
        }
        
        public static function getAll(){
            return self::model()->findAll('id>0 AND deleted=0');
        }
        
        public static function getAllFromLanguage($languageId){
            return self::model()->findAll('language_id='.$languageId.' AND deleted=0');
        }
        
        
        public static function getAllArray(){
            
            $langWebTexts=self::model()->findAll('id>0 AND deleted=0');
            
            $result=array();
            
            foreach($langWebTexts as $text){               
                
                $result[]=array('id'=>$text->id,
                                    'languageId'=>$text->language_id,
                                    'webTextId'=>$text->web_text_id,
                                    'value'=>$text->value,
                                    );
            }
            
            return $result;
        }
        
        public static function create($language_id, $web_text_id, $value){
            $languageWebText = new LanguageWebTexts;
            $languageWebText->language_id = $language_id;
            $languageWebText->web_text_id = $web_text_id;
            $languageWebText->value = $value;
            $languageWebText->updated_on = HelperFunctions::getDate();
            $languageWebText->deleted = 0;
            if($languageWebText->save())
                return $languageWebText;
            else{
                Errors::log('Error en Models/LanguageWebTexts/create','Error creating languageWebText',print_r($languageWebText->getErrors(),true));
                return $languageWebText;
            }
        }
            
        public function updateAttributes($language_id, $web_text_id, $value){
            $this->language_id = $language_id;
            $this->web_text_id = $web_text_id;
            $this->value = $value;
            $this->updated_on = HelperFunctions::getDate();
            if($this->save())
                return true;
            else{
                Errors::log('Error en Models/LanguageWebTexts/updateLanguageWebText','Error updating languageWebText id:$this->id', print_r($this->getErrors(),true));
                return false;
            }
        }
            
        public function deleteLanguageWebText(){
            $this->deleted = 1;
            $this->updated_on = HelperFunctions::getDate();
            if($this->save())
                return true;
            else{
                Errors::log('Error en Models/LanguageWebTexts/deleteLanguageWebText','Error deleting languageWebText id:$this->id', print_r($this->getErrors(),true));
                return false;
            }
        }
            
        
        public function getAllFromWebText($webTextId){
            return self::model()->findAll('web_text_id=:webTextIdVar AND deleted=0',array('webTextIdVar'=>$webTextId));
        }
            
}
?>